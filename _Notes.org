Commit Notes
------------
Proj: Add project_interior_monomial_onto_side_face, which completes the implementation necessary for the method.
WGBasis: Add functions wgrad_for_mon_on_side_face, fe_inclusions_of_side_support, mon_num.
Meshes:
  - Moved RMesh2/3 and their tests into semi-trash folder.  Incorporate RMesh2 unit tests into RMesh's tests.
  - Reimplement integrals using proper face-specific origins where appropriate for monomials and polynomials.
  - Add nb_side_num field to NBSideInclusions structure, so it can usefully be returned directly from WGBasis.
  - Removed unnecessary integral function.
  - Renamed integral functions to make clear how mono/polynomials should be interpreted with respect to the origin for their inputs.
VBF/VBF_a_s: Finished VBF_a_s implementation (not yet tested).  Factored code that will be common to all var bf's into VBF module.


TODO
----
Review VBF, VBF_a_s, WG

Q: Look into caching projections where they may be multiply computed.

Support multiple reference elements.
  Every mesh function that takes a face but does not take a finite element number, should take a reference element number.
  The reference element is a function of the finite element number.


Integration Calls and Expected Coordinate Systems
-------------------------------------------------
Proj
  OK
VBF
  There are no Mesh.integral* calls in this module, but every x_mon_vs_y_mon call uses monomials expecting face-local coordinates
  since they represent basis elements on the faces.
  The poly_on_boundary_side_face_vs_bel function expects the polynomial to be interpeted side-locally since it results from projection
  onto the side.  This matches the implication of the function name ("poly on boundary side") and the implementation which
  delegates to side_mon_vs_int/side_mon which are documented to interpret monomials face-locally.
VBF_a_s
  All calls to Mesh.integral_on_ref_fe_face and Mesh.integral_prod_on_ref_fe_face expect face-local monomials, matching the
  mesh's documented expectations.

WGrad
  The right term of the RHS needs an integral where the test function vector monomial is interpreted with the *fe interior*
  local origin (not that of the face!), while the other factor (v_b) is interpreted with the face's origin.
  Check other callers of the mesh functions involved, separate into separate functions if necessary, make the semantics clear
  for each.


TODO
----
Basis element monomials should always be interpreted in a coordinate system with origin in their support interior or side,
independently of any embedding in a finite element.

What about extension of v_0T to the boundary segment?  It's projected to a polynomial on the side (second function in Proj module),
from there it is interpreted locally on the side.  Make sure this is done properly, it is tricky.  The function before projection has
interior coordinates, being projected onto a space with basis functions being monomials with side-local coordinates.


MinusDivAGradVarBF
 Implement

Proj
 Test

Mesh
  For d=2,3 add numerical prod integral implementations and tests.

Long Term
---------
Allow multiple reference elements, e.g. for triangular meshes, which have alternating triangle orientations.
Most methods that just take a face would have to take a reference element code and a face, or a fe num and a face.

Documentation Changes
---------------------
rmesh docs:
  New interface functions:
    integral_prod_on_ref_fe_side_vs_outward_normal
    integral_vs_local_monomial_on_fe_interior
    integral_on_ref_fe_face
    num_side_faces_per_fe
    space_dim
    is_boundary_side
    side_face
    dependent_axis_for_side_face
    fe_diameter
    one_mon
  Change description of basis ordering, now pure lexicographically ordered.
  Change description of side basis size, and describe interaction with mesh to find "dependent dimension" for a side to form the basis there.
